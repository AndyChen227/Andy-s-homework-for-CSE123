// Andy Chen
// 9/29/2025
// CSE123
// CO: Search Engine
// TA: Anirudh Seshadri
import java.util.*;

// Book is a class that implments Media and Comparable So this class
// have to includes all method in Media and compareTo method
public class Book implements Media, Comparable<Book>{

    private final String title;
    private final List<String> authors;
    private List<String> content;
    private int numRatings;
    private int ratingSum;

    public Book(String title, List<String> authors, Scanner content){
        this.title = title;
        this.authors = authors;
        this.content = new ArrayList<>();
        this.numRatings = 0;
        this.ratingSum = 0;

        while(content.hasNext()){
            this.content.add(content.next());
        }
    }

    // Behavior: 
    //   - This method return the title of the book
    // Parameters:
    //   - None
    // Returns:
    //   - String: The name of the book
    // Exceptions:
    //   - None
    @Override
    public String getTitle(){
        return this.title;
    }

    // Behavior: 
    //   - This method return the author of this book in List<Strng> form
    // Parameters:
    //   - None
    // Returns:
    //   - List<String> : A list contains authors of the book
    // Exceptions:
    //   - None
    @Override
    public List<String> getArtists(){
        return this.authors;
    }

    // Behavior: 
    //   - Adding a new rate to this book shown above the ratingSum and numRatings
    // Parameters:
    //   - score : a score we gaved to this book
    // Returns:
    //   - none
    // Exceptions:
    //   - If user enters a negative score, we should remind him/her 
    //   - only positive socre is allowed
    @Override
    public void addRating(int score){
        if(score < 0){
            throw new IllegalArgumentException("Score must be non-negative");
        }

        this.ratingSum += score;
        this.numRatings +=1;
    }

    // Behavior: 
    //   - This method return how many ratings this book have
    // Parameters:
    //   - none
    // Returns:
    //   - int : return how many ratings this book have
    // Exceptions:
    //   - None
    @Override
    public int getNumRatings(){
        return this.numRatings;
    }

    // Behavior: 
    //   - This method is to return the AverageRating of this book
    // Parameters:
    //   - return
    // Returns:
    //   - double : return the AverageRating of the book
    // Exceptions:
    //   - none
    @Override
    public double getAverageRating(){
        if(this.numRatings == 0){
            return 0.0;
        } else{
            return (double) this.ratingSum / this.numRatings;
        }
    }

    // Behavior: 
    //   - This method return a String List contains the content of the book
    // Parameters:
    //   - none
    // Returns:
    //   -  List<String> : return the a List<String> contains the content of book
    // Exceptions:
    //   - none
    @Override
    public List<String> getContent(){
        return this.content;
    }

    // Behavior: 
    //   - Show some basic introduction of this book
    // Parameters:
    //   - none
    // Returns:
    //   - String : if the book doesn't have ratings, only return title + author
    //   - String : otherwise return title + author + AverageRating + numRatings
    // Exceptions:
    //   -`none
    @Override
    public String toString(){
        if (this.numRatings == 0) {
            return this.title + " by " + this.authors;
        }
        else {
            double aveRate = getAverageRating();
            double roundedAveRate = Math.round(aveRate * 100.0)/ 100.0;

            return this.title + " by " + this.authors + ": " + 
            roundedAveRate + " ("+ this.numRatings + " ratings)";
        }
    }

    // Behavior: 
    //   - user
    // Parameters:
    //   - <type> : Book - Book other - another book class
    // Returns:
    //   - int : return 1 if this book'AverageRating is greater than Book other
    //   - int : return 0 if these two books have same AverageRating
    //   - int : return -1 if this book'AverageRating is lower than the Book other
    // Exceptions:
    //   -`none
    @Override
    public int compareTo(Book other){
        if(this.getAverageRating() > other.getAverageRating()){
            return 1;
        } else if(this.getAverageRating() == other.getAverageRating()){
            return 0;
        } else{
            return -1;
        }
    }
}
